name: Deploy to Server
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: Generate unique Docker image tag
        id: version
        run: echo "::set-output name=tag::$(echo ${{ github.run_id }})"

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-stage:${{ steps.version.outputs.tag }} .

      - name: Login to Docker Hub
        run: |
          echo "Docker Hub username: ${{ secrets.DOCKER_USERNAME }}"
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/frontend-stage:${{ steps.version.outputs.tag }}

      - name: SSH to Instance
        env:
          HOSTNAME: ${{ secrets.SSH_HOST }}
          USER_NAME: ${{ secrets.USER_NAME }}

        run: |
          echo "${{ secrets.SSH_PRIVATEKEY }}" > my-ssh-key.pem
          chmod 600 my-ssh-key.pem

          # Get the ID of the running container
          RUNNING_CONTAINER=$(ssh -o StrictHostKeyChecking=no -i my-ssh-key.pem $USER_NAME@${HOSTNAME} "sudo docker ps --filter \"name=frontend-staging\" --format \"{{.ID}}\"")
          if [ -n "$RUNNING_CONTAINER" ]; then
            echo "Stopping and removing existing container: $RUNNING_CONTAINER"
            ssh -o StrictHostKeyChecking=no -i my-ssh-key.pem $USER_NAME@${HOSTNAME} "sudo docker stop $RUNNING_CONTAINER || true"
            ssh -o StrictHostKeyChecking=no -i my-ssh-key.pem $USER_NAME@${HOSTNAME} "sudo docker rm $RUNNING_CONTAINER || true"
          else
            echo "No existing container found with name: frontend-staging"
          fi
          ssh -o StrictHostKeyChecking=no -i my-ssh-key.pem $USER_NAME@${HOSTNAME} '
          sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/frontend-stage:${{ steps.version.outputs.tag }}
          UNIQUE_ID=$(date +%s)
          CONTAINER_NAME="frontend-staging-${UNIQUE_ID}"
          echo "Starting Docker container..."
          sudo docker run -d --name $CONTAINER_NAME -p 3000:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/frontend-stage:${{ steps.version.outputs.tag }}
          echo "Docker container started......."
          sudo docker image prune -a --force
          '
