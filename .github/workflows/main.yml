name: Publish Docker image

on:
  push:
    branches: ['main']

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: bhavya8340/react-app
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: SSH to Instance

        env:

          HOSTNAME: ${{ secrets.SSH_HOST }}

          USER_NAME: ${{ secrets.USER_NAME }}

        run: |

          echo "${{ secrets.SSH_PRIVATEKEY }}" > my-ssh-key.pem

          chmod 600 my-ssh-key.pem



          # Get the ID of the running container

          RUNNING_CONTAINER=$(ssh -o StrictHostKeyChecking=no -i my-ssh-key.pem $USER_NAME@${HOSTNAME} "sudo docker ps --filter \"name=react-app\" --format \"{{.ID}}\"")



          if [ -n "$RUNNING_CONTAINER" ]; then

            echo "Stopping and removing existing container: $RUNNING_CONTAINER"

            ssh -o StrictHostKeyChecking=no -i my-ssh-key.pem $USER_NAME@${HOSTNAME} "sudo docker stop $RUNNING_CONTAINER || true"

            ssh -o StrictHostKeyChecking=no -i my-ssh-key.pem $USER_NAME@${HOSTNAME} "sudo docker rm $RUNNING_CONTAINER || true"

          else

            echo "No existing container found with name: react-app"

          fi



          ssh -o StrictHostKeyChecking=no -i my-ssh-key.pem $USER_NAME@${HOSTNAME} '

          sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}

          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/react-app:${{ steps.version.outputs.tag }}

          UNIQUE_ID=$(date +%s)

          CONTAINER_NAME="react-app-${UNIQUE_ID}"

          echo "Starting Docker container..."

          sudo docker run -d --name $CONTAINER_NAME -p 4000:4000 --env-file ./.env ${{ secrets.DOCKER_USERNAME }}/react-app:${{ steps.version.outputs.tag }}

          echo "Docker container started......."

          sudo docker image prune -a --force
